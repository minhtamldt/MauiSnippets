{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"prismDelegateCommand": {
		"scope": "csharp",
		"prefix": "cmd",
		"body": [
			"#region ${1}Command",
			"private DelegateCommand _${2}Command;",
			"public DelegateCommand ${1}Command => _${2}Command ??= new DelegateCommand(async () => {",
			"    if(IsBusy) return;",
			"    IsBusy = true;",
			"    IsBusy = false;",
			"});",
			"#endregion"
		],
		"description": "Create a prism delegate command"
	},
	"prismDelegateCommandWithCanExecute": {
		"scope": "csharp",
		"prefix": "cmdcan",
		"body": [
			"#region ${1}Command",
			"private DelegateCommand _${2}Command;",
			"public DelegateCommand ${1}Command => _${2}Command ??= new DelegateCommand(",
			"    executeMethod: async () =>",
			"    {",
			"        if (IsBusy) return;",
			"        IsBusy = true;",
			"        IsBusy = false;",
			"    },",
			"    canExecuteMethod: () =>",
			"    {",
			"        return !IsBusy;",
			"    })",
			"    .ObservesProperty(() => IsBusy);",
			"#endregion"
		],
		"description": "Create a prism delegate command with CanExecute"
	},
	"genericDelegateCommandWithCanExecute": {
		"scope": "csharp",
		"prefix": "cmdcant",
		"body": [
			"#region ${1}Command",
			"private DelegateCommand<${3:string}> _${2}Command;",
			"public DelegateCommand<${3:string}> ${1}Command => _${2}Command ??= new DelegateCommand<${3:string}>(",
			"    executeMethod: async arg =>",
			"    {",
			"        if (IsBusy) return;",
			"        IsBusy = true;",
			"        IsBusy = false;",
			"    },",
			"    canExecuteMethod: arg =>",
			"    {",
			"        return !IsBusy;",
			"    })",
			"    .ObservesProperty(() => IsBusy);",
			"#endregion"
		],
		"description": "Create a generic delegate command with CanExecute"
	},
	"genericPrismDelegateCommand": {
		"scope": "csharp",
		"prefix": "cmdt",
		"body": [
			"#region ${1}Command",
			"private DelegateCommand<${3:string}> _${2}Command;",
			"public DelegateCommand<${3:string}> ${1}Command => _${2}Command ??= new DelegateCommand<${3:string}>(async arg => {",
			"    if(IsBusy) return;",
			"    IsBusy = true;",
			"    IsBusy = false;",
			"});",
			"#endregion"
		],
		"description": "Create a generic prism delegate command"
	},
	"coolComment": {
		"scope": "csharp",
		"prefix": "cmt",
		"body": [
			"/* ==================================================================================================",
			" * $end$",
			" * ================================================================================================*/"
		],
		"description": "Create a cool comment"
	},
	"attachedProperty": {
		"scope": "csharp",
		"prefix": "propa",
		"body": [
			"#region ${1:value}",
			"public static readonly BindableProperty ${1}Property = BindableProperty.CreateAttached(\"${1}\", typeof(${2:string}), typeof(${3:classname}), default(${2:string}));",
			"public static ${2:string} Get${1}(BindableObject bindable)",
			"    => (${2:string})bindable.GetValue(${1}Property);",
			"public static void Set${1}(BindableObject bindable, ${2:string} value)",
			"    => bindable.SetValue(${1}Property, value);",
			"#endregion"
		],
		"description": "Create an attached property"
	},
	"bindableProperty": {
		"scope": "csharp",
		"prefix": "propb",
		"body": [
			"#region ${1:name}",
			"public static BindableProperty ${1:name}Property = BindableProperty.Create(nameof(${1:name}), typeof(${2:string}), typeof(${3:classname}), default(${2:string}), ${4:BindingMode.Oneway});",
			"public ${2:string} ${1:name}",
			"{",
			"  get { return (${2:string}) GetValue(${1:name}Property); }",
			"  set { SetValue(${1:name}Property, value); }",
			"}",
			"#endregion"
		],
		"description": "Create a bindable property"
	},
	"bindablePropertyWithPropertyChanged": {
		"scope": "csharp",
		"prefix": "propbchanged",
		"body": [
			"#region ${1:name}",
			"public static BindableProperty ${1:name}Property = BindableProperty.Create(nameof(${1:name}), typeof(${2:string}), typeof(${3:classname}), default(${2:string}), ${4:BindingMode.Oneway}, propertyChanged: on${1:name}PropertyChanged);",
			"private static void ${1:name}Changed(BindableObject bindable, object oldValueObject, object newValueObject)",
			"{",
			"    var @this = (${3:classname})bindable;",
			"    var oldValue = (${2:string})oldValueObject;",
			"    var newValue = (${2:string})newValueObject;",
			"}",
			"public ${2:string} ${1:name}",
			"{",
			"  get { return (${2:string})GetValue(${1:name}Property); }",
			"  set { SetValue(${1:name}Property, value); }",
			"}",
			"#endregion"
		],
		"description": "Create a bindable property with property changed"
	},
	"propertyWithJsonProperty": {
		"scope": "csharp",
		"prefix": "propj",
		"body": [
			"[JsonProperty(\"${1:property}\")]",
			"public ${2:type} ${1:property} { get; set; }"
		],
		"description": "Property with JsonProperty attribute"
	},
	"propertyWithPrismSetProperty": {
		"scope": "csharp",
		"prefix": "props",
		"body": [
			"private ${3:string} _${1:filed};",
			"public ${3:string} ${2:property}",
			"{",
			"    get { return _${1:filed}; }",
			"    set { SetProperty(ref _${1:filed}, value); }",
			"}"
		],
		"description": "Property with Prism SetProperty"
	},
	"validatableObjectProperty": {
		"scope": "csharp",
		"prefix": "propv",
		"body": [
			"public ValidatableObject<${2:string}> ${1:name} { get; set; } = new ValidatableObject<$valuetype$>(false);"
		],
		"description": "Create a validatable object property"
	}
}